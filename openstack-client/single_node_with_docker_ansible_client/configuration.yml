- hosts: all
  
  tasks:
   
   - name: Generate hosts file
     lineinfile: dest=/etc/hosts
                 regexp='.*{{ item }}$'
                 line="{{ hostvars[item].ansible_default_ipv4.address }} {{item}}"
                 state=present            
     when: hostvars[item].ansible_default_ipv4.address is defined
     with_items: "{{groups['all']}}"
     become: true
     
   - name: Set hostname
     hostname: name="{{inventory_hostname}}"
     become: true

   - name: apt update
     apt: update_cache=yes upgrade=dist
     become: true
#   - hosts: local
#   - name: load ssh key
#     shell: |
#       ssh-add ~/cluster-keys/cluster-key

   - name: Download git repository
     become: true
     git:
      repo: 'https://LingkaiZhu1999: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@github.com/LingkaiZhu1999/model_serving.git'
      dest: /model_serving

   - name: Change ownership of a directory
     become: true
     file:
      path: /technical-training
      state: directory
      recurse: yes
      owner: appuser
      group: appuser


- hosts: prodserver
 
  vars_files:
   - setup_var.yml  
  
  tasks:  
   - name: Extra packages
     apt: pkg={{item}} state=latest update_cache=true 
     with_items:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
     become: true  

   - name: apt update
     apt: update_cache=yes upgrade=dist
     become: true

   - name: Add Docker repository key
     apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
     become: true

   - name: Add Docker repository 
     command: add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
     become: true

   - name: apt update
     apt: update_cache=yes upgrade=dist
     become: true
  
   # Workaround pip issue with MTU mismatch, see: https://github.com/docker/docker.github.io/pull/9249/files
   # MTU for SNIC is 1450, Docker default is 1500. Override so that Docker matches the host.
   # We create the config file before installing, to avoid any need to restart the docker daemon.
   - name: Create Ansible docker config directory.
     become: true
     file:
       path: "/etc/docker"
       state: directory

   - name: Create Ansible docker file to configure Docker MTU to match SNIC for pip issue
     become: true
     copy:
       dest: "/etc/docker/daemon.json"
       content: |
        {
          "mtu": 1450
        }

   - name: Install Docker  
     apt: pkg=docker-ce state=present update_cache=true allow_unauthenticated=yes
     become: true

   - name: Download docker-compose 
     become: yes
     get_url:        
      url: "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-{{ansible_system}}-{{ansible_architecture}}"
      dest: /usr/local/bin/docker-compose
      mode: +x  

   - name: Building containers
     become: true
     shell: docker build .
     args: 
      chdir: /model_serving/ci_cd/production_server

   - name: Running containers
     become: true
     shell: docker-compose up -d 
     args: 
      chdir: /model_serving/ci_cd/production_server 

- hosts: devserver
  
  vars_files:
   - setup_var.yml

  tasks:
   - name: Extra packages
     apt: pkg=python3-pip state=latest update_cache=true  
     become: true

   - name: Install ML packages and Ray
     become: true
     pip: 
      name: tensorflow==2.5.3, keras==2.4.1, numpy, future, protobuf==3.20.1, ray[tune]
   - name: Reboot to activate ray
     become: true
     reboot:
       reboot_timeout: 300
#   - name: Copy file with owner and permissions
#     ansible.builtin.copy:
#       src: ~/cluster-keys/cluster-key
#       dest: ~/.ssh/id_rsa
#       owner: appuser
#       group: appuser
#       mode: '0600'
   - name: Generate ssh keys for ray cluster
     shell: ssh-keygen -q -t rsa -f /home/appuser/.ssh/id_rsa -C "" -N "" -y

   - name: Copy public key to authorized keys
     shell: cat id_rsa.pub >> authorized_keys
     args:
       chdir: /home/appuser/.ssh
   - name: Get ray head node's public key
     fetch:
     src: /home/appuser/.ssh/id_rsa.pub
     dest: /home/ubuntu/
   - name: Init ray
     shell: python3 ray_init.py
     args:
       chdir: /model_serving/ci_cd/development_server

#   - name: Starting the ray cluster
#       become: true
#       shell: ray up
#       args:
#         chdir: /model_serving/ci_cd/production_server
- hosts: raycluster

  vars_files:
   - setup_var.yml

  tasks:
   - name: Extra packages
     apt: pkg=python3-pip state=latest update_cache=true
     become: true

   - name: Install ML packages and Ray
     become: true
     pip:
      name: tensorflow==2.5.3, keras==2.4.1, numpy, future, protobuf==3.20.1, ray[tune]
   - name: Reboot to activate ray
     become: true
     reboot:
       reboot_timeout: 300
#   - name: Copy file with owner and permissions
#     ansible.builtin.copy:
#       src: ~/cluster-keys/cluster-key
#       dest: ~/.ssh/id_rsa
#       owner: appuser
#       group: appuser
#       mode: '0600'
   - name: Generate ssh keys for ray cluster
     shell: ssh-keygen -q -t rsa -f /home/appuser/.ssh/id_rsa -C "" -N "" -y

   - name: Copy public key to authorized keys
     shell: cat id_rsa.pub >> authorized_keys
     args:
       chdir: /home/appuser/.ssh
   - name: Init ray
     shell: python3 ray_init.py
     args:
       chdir: /model_serving/ci_cd/development_server
   - name: Distribute head node's public key to workers
     ansible.builtin.copy:
     src: /home/ubuntu/id_rsa.pub
     dest: /home/appuser/
   - name: Add public key to the authorized
     shell: cat /home/appuser/id_rsa.pub >> /home/appuser/.ssh/authorized_keys
- hosts: devserver
  vars_files:
    - setup_var.yml
  tasks:
    - name: Start ray cluster
      shell: ray up ./raycluster.yaml -y
      args:
        chdir: /model_serving/ci_cd/development_server


